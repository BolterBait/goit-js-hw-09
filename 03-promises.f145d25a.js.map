{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEoBC,SAASC,cAAc,SAC/BC,iBAAiB,UAE7B,SAAoBC,GAChBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,cACTC,EAASC,OAAOH,EAAKI,SAASF,OAAOG,OAC3C,IAAIC,EAAaH,OAAOH,EAAKI,SAASG,MAAMF,OAC5C,MAAMG,EAAYL,OAAOH,EAAKI,SAASK,KAAKJ,OAC5C,IAAK,IAAIK,EAAU,EAAGA,GAAWR,EAAQQ,GAAU,EAAG,CAEtD,SAASC,EAAcC,EAASC,GAC9B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC7B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACJF,EAAQ,C,QAAEH,E,UAASC,IAErBG,EAAO,C,QAAEJ,E,UAASC,GAAY,GAC3BP,EAAW,G,CAGlBK,EAAcD,EAASF,GACtBa,MAAK,EAACT,QAAEA,EAAOC,UAAEA,MAChBS,EAAA7B,GAAS8B,OAAOC,KAAK,uBAAqBZ,QAAgBC,MAAc,IAEzEY,OAAM,EAACb,QAAEA,EAAOC,UAAEA,MACjBS,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoBd,QAAcC,MAAc,IACvEc,SAAQ,IAAM3B,EAAK4B,UACtBtB,GAAcE,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst promiseForm = document.querySelector('.form');\npromiseForm.addEventListener('submit', onClickBtn);\n\nfunction onClickBtn(e) {\n    e.preventDefault();\n    const form = e.currentTarget; \n    const amount = Number(form.elements.amount.value);\n    let firstDelay = Number(form.elements.delay.value);\n    const delayStep = Number(form.elements.step.value);\n    for (let counter = 1; counter <= amount; counter +=1) {\n      \n    function createPromise(counter, delayStep) {\n      return new Promise((resolve, reject) => {   \n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n        resolve({ counter, delayStep });\n  }\n      reject({ counter, delayStep });\n      }, firstDelay);\n   });\n     }   \n  createPromise(counter, delayStep)\n  .then(({ counter, delayStep }) => {\n    Notiflix.Notify.info(`✅ Fulfilled promise ${counter} in ${delayStep}ms`);\n  })\n  .catch(({ counter, delayStep }) => {\n    Notiflix.Notify.warning(`❌ Rejected promise ${counter} in ${delayStep}ms`);\n  }).finally(() => form.reset());\n  firstDelay += delayStep;\n  }\n}"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","e","preventDefault","form","currentTarget","amount","Number","elements","value","firstDelay","delay","delayStep1","step","counter1","createPromise","counter","delayStep","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","info","catch","warning","finally","reset"],"version":3,"file":"03-promises.f145d25a.js.map"}